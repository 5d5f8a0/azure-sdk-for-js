parameters:
  Artifacts: []
  TestPipeline: false
  ServiceDirectory: not-specified
  IncludeRelease: true

steps:
  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
    parameters:
      PackageName: "@azure/template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - pwsh: |
      $folder = "${{parameters.ServiceDirectory}}"
      if ($folder -eq "*" -or $folder -eq "auto") { $folder = "" }
      echo "##vso[task.setvariable variable=folder]$folder"
    displayName: "Set folder variable for readme links"

  # we are not passing service directory, so we only ever set dev build to true
  - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml

  # todo: update set-dev.js to handle multiple service directories based on the ChangedServices value of the diff
  # currently defaulting to nothing, so we set the entire repo to dev build (we do this for python)
  - script: |
      npm install ./eng/tools/versioning
      node eng/tools/versioning/set-dev.js --build-id "$(Build.BuildNumber)" --repo-root "$(Build.SourcesDirectory)" --service "$(folder)"
      node common/scripts/install-run-rush.js update
    condition: and(succeeded(),eq(variables['SetDevVersion'],'true'))
    displayName: "Update package versions for dev build"

  - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}

  - script: |
      node common/scripts/install-run-rush.js install
    condition: and(succeeded(),ne(variables['SetDevVersion'],'true'))
    displayName: "Install dependencies"

  - template: /eng/pipelines/templates/steps/set-artifact-packages.yml
    parameters:
      PackageInfo: $(Build.ArtifactStagingDirectory)/PackageInfo
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')) }}:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure SDK Artifacts'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account show
          expiry=`date -u -d "45 minutes" '+%Y-%m-%dT%H:%MZ'`
          sasToken=$(az storage container generate-sas --account-name azuresdkartifacts --name azure-sdk-for-js-rush-cache --permissions dlrw --auth-mode login --as-user --expiry $expiry --https-only -o tsv)
          echo "##vso[task.setvariable variable=rushBuildCacheCred;issecret=true;]$sasToken"

  - pwsh: |
      $prDiff = Get-Content $(Build.ArtifactStagingDirectory)/diff/diff.json | ConvertFrom-Json -AsHashTable

      $services = "auto"
      if ($prDiff["ChangedServices"]) {
        $services = $prDiff["ChangedServices"] -join " "
      }

      Write-Host "##vso[task.setvariable variable=ChangedServices;]$services"

      node eng/tools/rush-runner.js build $services -packages "$(ArtifactPackageNames)" --verbose -p max
    displayName: "Build libraries for PR"
    condition: and(succeeded(),eq(variables['Build.Reason'],'PullRequest'))
    env:
      ${{ if and(eq(variables['System.TeamProject'], 'internal'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')) }}:
        RUSH_BUILD_CACHE_CREDENTIAL: $(rushBuildCacheCred)
        RUSH_BUILD_CACHE_WRITE_ALLOWED: 1

  # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
  # The default on Windows is "cores - 1" (microsoft/rushstack#436).
  - script: |
      node eng/tools/rush-runner.js build "${{parameters.ServiceDirectory}}" -packages "$(ArtifactPackageNames)" --verbose -p max
    displayName: "Build libraries for Service"
    condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'))
    env:
      ${{ if and(eq(variables['System.TeamProject'], 'internal'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')) }}:
        RUSH_BUILD_CACHE_CREDENTIAL: $(rushBuildCacheCred)
        RUSH_BUILD_CACHE_WRITE_ALLOWED: 1

  - script: |
      node eng/tools/rush-runner.js build:samples "$(ChangedServices)" -packages "$(ArtifactPackageNames)" --verbose
    displayName: "Build samples for PR"
    condition: and(succeeded(),eq(variables['Build.Reason'],'PullRequest'))

  - script: |
      node eng/tools/rush-runner.js build:samples "${{parameters.ServiceDirectory}}" -packages "$(ArtifactPackageNames)" --verbose
    displayName: "Build samples for Service"
    condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'))

  - pwsh: |
      eng/tools/check-api-warning.ps1
    displayName: "Check api extractor output changes"

  - script: |
      node eng/tools/rush-runner.js pack "$(ChangedServices)" -packages "$(ArtifactPackageNames)" --verbose
    displayName: "Pack libraries"

  # Unlink node_modules folders to significantly improve performance of subsequent tasks
  # which need to walk the directory tree (and are hardcoded to follow symlinks).
  - script: |
      node eng/tools/rush-runner.js unlink
    displayName: "Unlink dependencies"

  - template: ../steps/generate-doc.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}

  # todo, handle direct/indirect packages here
  # todo, add the parse of the documentation status to eng/common so that we don't have to look at the ci.yml properties again
  - pwsh: |
      $artifacts = Get-ChildItem -Recurse -Force "$(Build.ArtifactStagingDirectory)/PackageInfo/*.json" `
          | ForEach-Object { $_.Name.Replace(".json", "") }

      foreach ($artifact in $artifacts)
      {
        $artifactDetails = Get-Content $(Build.ArtifactStagingDirectory)/PackageInfo/$artifact.json | ConvertFrom-Json

        Write-Host "Copying $artifact artifacts to $(Build.ArtifactStagingDirectory)/$artifact"
        New-Item -Type Directory -Name $artifact -Path $(Build.ArtifactStagingDirectory) > $null
        Copy-Item sdk/$($artifactDetails.Service)/**/$artifact-[0-9]*.[0-9]*.[0-9]*.tgz $(Build.ArtifactStagingDirectory)/$artifact
        Copy-Item sdk/$($artifactDetails.Service)/**/browser/$artifact-[0-9]*.[0-9]*.[0-9]*.zip $(Build.ArtifactStagingDirectory)/$artifact

        if ($${{ parameters.IncludeRelease }} -eq $true)
        {
          New-Item -Type Directory -Name documentation -Path $(Build.ArtifactStagingDirectory)/$artifact > $null
          Copy-Item $(Build.SourcesDirectory)/docGen/$artifact.zip $(Build.ArtifactStagingDirectory)/$artifact/documentation
        }
      }
    displayName: 'Copy Packages'

  - pwsh: |
      eng/scripts/stage-api-review-file.ps1 -PackageInfoPath $(Build.ArtifactStagingDirectory)/PackageInfo -StagingDirectory $(Build.ArtifactStagingDirectory)
    displayName: 'Copy API extracted files'

  - task: Powershell@2
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/scripts/Generate-APIView-CodeFile.ps1
      arguments: >
        -ArtifactPath $(Build.ArtifactStagingDirectory)
      pwsh: true
      workingDirectory: $(Pipeline.Workspace)
    displayName: Create APIView code file

  - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
    parameters:
      ArtifactPath: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'packages'

  - template: /eng/common/pipelines/templates/steps/create-apireview.yml
    parameters:
      Artifacts: ${{ parameters.Artifacts }}

  - template: /eng/common/pipelines/templates/steps/detect-api-changes.yml
    parameters:
      Artifacts: ${{ parameters.Artifacts }}

  - template: /eng/common/pipelines/templates/steps/validate-all-packages.yml
    parameters:
      Artifacts: ${{ parameters.Artifacts }}
