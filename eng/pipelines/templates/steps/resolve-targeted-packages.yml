parameters:
  ServiceDirectory: ''

steps:
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    - pwsh: |
        mkdir -p $(Build.ArtifactStagingDirectory)/diff
      displayName: Create PR Diff Folder

    - pwsh: |
        $location = Join-Path "$(Build.ArtifactStagingDirectory)" "diff"

        Write-Host "./eng/common/scripts/Generate-PR-Diff.ps1 -TargetPath `"$(Build.SourcesDirectory)`" -ArtifactPath `"$location`""
        ./eng/common/scripts/Generate-PR-Diff.ps1 -TargetPath "$(Build.SourcesDirectory)" -ArtifactPath "$location"
      displayName: Generate PR Diff

    - pwsh: |
        Write-Host "This is the diff for this PR"
        $diff = "$(Build.ArtifactStagingDirectory)/diff/diff.json"

        $changedServices = (Get-Content $diff | ConvertFrom-Json).ChangedServices
        $changedServices = $changedServices -join " "

        Write-Host "Setting ArtifactServices to $changedServices"
        Write-Host "##vso[task.setvariable variable=ArtifactServices;]$changedServices"
      displayName: Dump PR Diff and Set Targeted Services

    - task: Powershell@2
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
        arguments: >
          -PrDiff $(Build.ArtifactStagingDirectory)/diff/diff.json
          -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
      displayName: Save package properties filtered for PR

  - ${{ else }}:

    - task: Powershell@2
      condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
        arguments: >
          -ServiceDirectory ${{parameters.ServiceDirectory}}
          -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
          -AddDevVersion
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
        displayName: Save package properties with dev version

    - task: Powershell@2
      condition: and(succeeded(), ne(variables['SetDevVersion'],'true'))
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
        arguments: >
          -ServiceDirectory ${{parameters.ServiceDirectory}}
          -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
        displayName: Save package properties for service

    - pwsh: |
        Write-Host "##vso[task.setvariable variable=ArtifactServices;]${{parameters.ServiceDirectory}}"
      displayName: Set ArtifactServices
